SELECT * FROM EMPLOYEES ; 

-- FIND OUT ALL THE EMPLOYEES WITH DEPARTMENT ID OF 60 OR 100 

SELECT * FROM EMPLOYEES 
WHERE DEPARTMENT_ID = 60 OR DEPARTMENT_ID = 100 ; 

--- ON TOP OF ABOVE QUERY ONLY GET FIRST NAME AND LAST NAME AND SALARY AND JOB_ID 

SELECT FIRST_NAME , LAST_NAME, SALARY, JOB_ID 
FROM EMPLOYEES 
WHERE DEPARTMENT_ID = 60 OR DEPARTMENT_ID = 100 ; 

-- > >=  =  !=  <>  <  >=  
-- AND , OR 

--  FIND OUT ALL THE JOBS INFORMATION IF THE MINIMUM SALARY IS MORE THAN 5500 AND LESS THAN 10000 
-- USE JOBS TABLE 
-- BETWEEN ... AND ... 
SELECT * FROM JOBS 
--WHERE MIN_SALARY BETWEEN 5500 AND 10000 ;   -- These two lines are doing same thing 
WHERE MIN_SALARY >= 5500 AND MIN_SALARY <= 10000;



-- FIND OUT ALL THE EMPLOYEES FIRST NAME AND PHONE AND DEPARTMENT_ID
-- WITH DEPARTMENT ID OF 60 OR 100 OR 90 OR 80, 120
-- IF WE ARE CHECKING FOR MULTIPLE POSSIBLE VALUES FOR SAME COLUMN 
-- WE CAN USE  IN (VALUE1, VALUE2, VALUE3......)

SELECT FIRST_NAME , PHONE_NUMBER , DEPARTMENT_ID
FROM EMPLOYEES 
WHERE DEPARTMENT_ID IN (60,100,90,80,120)
; 
-- ABOVE QUERY IS SAME AS BELOW QUERY USING OR 
SELECT FIRST_NAME, PHONE_NUMBER , DEPARTMENT_ID
    FROM EMPLOYEES  
WHERE DEPARTMENT_ID =60 OR 
      DEPARTMENT_ID =70 OR 
      DEPARTMENT_ID =80 OR 
      DEPARTMENT_ID =90 ; 

--- I WANT TO GET ALL THE FIRST NAME THAT START WITH LETTER A 
--- FROM EPPLOYEES TABLE 
-- % IS WILD CARD that can represend 0 or more characthers 
-- and it's used with LIKE 
-- for example 'A%' means --> any String that start with letter A 
-- WE CAN USE IT TO PARTIAL STRING MATCH 

SELECT FIRST_NAME 
FROM EMPLOYEES 
WHERE FIRST_NAME LIKE 'A%'
; 


--- I WANT TO GET ALL THE FIRST NAME THAT END WITH LETTER a
--  %a
SELECT FIRST_NAME 
FROM EMPLOYEES 
WHERE FIRST_NAME LIKE '%a' ;

-- FIND OUT ALL FIRST_NAME AND LAST NAME FROM EMPLOYEES TABLE 
-- IF THE FIRST NAME START WITH A AND LAST NAME END WITH n

SELECT FIRST_NAME , LAST_NAME 
FROM EMPLOYEES 
WHERE FIRST_NAME LIKE 'A%' AND LAST_NAME LIKE '%n'  ; 

-- FIND OUT ALL THE NAMES THAT CONTAINS letter a , anywhere 
-- `%a%`  means a can be anywhere 
SELECT FIRST_NAME 
FROM EMPLOYEES 
WHERE FIRST_NAME LIKE '%a%' ; 

-- TASK 1 
--- FROM EMPLOYEES TABLE FIND OUT ALL JOB_IDs start with AD 
SELECT JOB_ID 
FROM EMPLOYEES 
WHERE JOB_ID LIKE 'AD%' ; 
-- TASK 2
--- FROM EMPLOYEES TABLE FIND OUT ALL JOB_IDs END with REP  
SELECT JOB_ID 
FROM EMPLOYEES 
WHERE JOB_ID LIKE '%REP' ; 

-- FROM EMPLOYEES TABLE FIND OUT ALL JOB_IDs DOES NOT END with REP  
SELECT JOB_ID 
FROM EMPLOYEES 
WHERE JOB_ID NOT LIKE '%REP' ; 

-- FIND OUT ALL THE FIRST NAME DOES NOT CONTAIN LETTER a 

SELECT FIRST_NAME 
FROM EMPLOYEES 
WHERE FIRST_NAME NOT LIKE '%a%'; 

--- MAKE ABOVE QUERY CASE INSENSITIVE 
--- first name does not contains a and it does not start with A 
SELECT FIRST_NAME 
FROM EMPLOYEES 
WHERE FIRST_NAME NOT LIKE '%a%'  AND FIRST_NAME NOT LIKE 'A%' ; 


-- WORKING WITH NULL VALUE 
-- IF A CELL HAS NO VALUE ENTERED IT'S NULL 

-- FIND OUT THE EMPLOYEES INFORMATION IF THE EMPLOYEES MANAGER_ID IS NULL 
SELECT * FROM EMPLOYEES 
WHERE MANAGER_ID IS NULL ; 

-- FIND OUT FIRST_NAME AND MANAGER ID IF THE MANAGER ID IS NOT NULL 
SELECT FIRST_NAME , MANAGER_ID 
FROM EMPLOYEES 
WHERE MANAGER_ID IS NOT NULL ; 

-- FUNCTIONS IN SQL -- PRE-WRITTEN FUNCTIONALITY WE CAN DIRECTLY USE 

--- SINGLE ROW FUNCTIONS 
/*
concatination operator ||,        with space firstName || ' ' || lastName
concat(value1, value2),            with space concat(concat(value1) ' '), (value2)
substr(value, begIndex, endIndex)
upper(value),       makes value upperCase
lower(value),       makes value lowerCase
initCap(value),    makes first letter upperCase
length(value),      defines length of the giving value
replace(first_name, 'A', 'B'),      replaces all A to B from the giving value
trim(value),          removes empty spaces

*/

-- DISPLAY ALL EMPLOYEES FIRST NAME IN UPPERCASE 

SELECT  FIRST_NAME , UPPER( FIRST_NAME ) , LOWER( FIRST_NAME )
FROM EMPLOYEES ; 


--- RETURN ALL EMPLOYEE FIRST_NAME AND SALARY FROM EMPLOYEE TABLES 
--- DISPLAY THE RESULTING COLUMN AS , NAME , MONEY 
--- WE CAN GIVE ALIAS TO THE QUERY RESULT COLUMN NAME USING AS 
SELECT FIRST_NAME AS NAME, SALARY AS MONEY 
FROM EMPLOYEES ; 

--- I WANT TO RETURN FIRST_NAME AND LAST_NAME IN ONE COLUMN AND NAME THIS COLUMN AS FULL_NAME 
-- THE RESULT SHOULD BE 3 COLUMNS , FIRST_NAME, LAST_NAME , FULL_NAME 

-- CONCATENATION IN SQL USE || 
SELECT FIRST_NAME , LAST_NAME ,  FIRST_NAME || ' '|| LAST_NAME AS FULL_NAME
FROM EMPLOYEES ; 


--- I Love SQL Already LalaLa


-- -- FIND OUT ALL THE FIRST NAME CONTAIN LETTER A or a 
SELECT FIRST_NAME , UPPER(FIRST_NAME)
FROM EMPLOYEES 
WHERE UPPER(FIRST_NAME) LIKE '%A%'
; 

SELECT FIRST_NAME 
FROM EMPLOYEES 
WHERE LOWER(FIRST_NAME) LIKE '%a%'
; 


--FIND OUT ALL THE FIRST NAME DOES NOT CONTAIN LETTER A or a 
SELECT FIRST_NAME , UPPER(FIRST_NAME)
FROM EMPLOYEES 
WHERE UPPER(FIRST_NAME) NOT LIKE '%A%'
; 


--- DISPLAY FIRST 3 LETTERS OF FIRST NAME 
-- substr(value, begIndex, endIndex)
SELECT FIRST_NAME ,  SUBSTR(FIRST_NAME, 1 , 3 ) , LENGTH(FIRST_NAME)
FROM EMPLOYEES ; 






--- MULTI-ROW FUNCTION | GROUP FUNCTION | AGGREGAGE FUNCTION 

